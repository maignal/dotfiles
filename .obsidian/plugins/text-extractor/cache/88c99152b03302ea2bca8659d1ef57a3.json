{"path":"Exercises/Solutions/ToC ex 6 sol.pdf","text":"Exercise VI, Theory of Computation 2025 These exercises are for your own benefit. Feel free to collaborate and share your answers with other students. Solve as many problems as you can and ask for help if you get stuck for too long. Problems marked * are more difficult but also more fun :). These problems are taken from various sources at EPFL and on the Internet, too numer- ous to cite individually. 1 Let A1 and A2 be languages with A1 ≤m A2. Is it necessarily true that A1 ≤m A2? Solution: Yes, this is true. If A1 ≤m A2, then by definition there is a computable function f : Σ∗ → Σ∗ such that for every w ∈ Σ∗ we have w ∈ A1 ⇐⇒ f (w) ∈ A2. Hence clearly, we also have that for every w ∈ Σ∗ w ̸∈ A1 ⇐⇒ f (w) ̸∈ A2 . This is equivalent to w ∈ A1 ⇐⇒ f (w) ∈ A2. Therefore, by definition of the reduction, we have A1 ≤m A2 as desired. Page 1 (of 4) CS-251 Theory of Computation • Spring 2025 2 Classify each of the following languages into one of the following three categories: decidable, undecidable but recognizable, unrecognizable Justify your answers with proofs (try reductions). 2a L1 = {⟨M ⟩ : M is a Turing machine that halts on all inputs of length at most 2025 } 2b* L2 = {⟨M ⟩ : M is a Turing machine that halts on all inputs of length at least 2025 } 2c L3 = {⟨M ⟩ : M is a Turing machine that accepts some string with more zeros than ones} Solution: 2a The language L1 is recognizable but not decidable. We show recognizability and undecid- ability separately. We first construct a Turing machine that recognizes L1: On input ⟨M ⟩, do: 1. Simultaneously, for each string w of length at most 2025, simultaneously M (w). 2. If all simulations accepted, accept. Otherwise, reject. If ⟨M ⟩ ∈ L1, then this algorithm accepts since there are finitely many strings of length at most 2025, each accepted by M after finitely many steps. If ⟨M ⟩ ̸∈ L1, then this algorithm does clearly not accept. Thus, by the Church-Turing thesis, L1 is recognisable. To show undecidability, we prove ATM ≤m L1. Consider f : Σ∗ → Σ∗ defined as follows: On input ⟨T, w⟩, do: 1. Construct a Turing machine M , which does the following on input x: (a) If T (w) accepts, then so does M . (b) Otherwise, M enters an infinite loop. 2. Output ⟨M ⟩. This algorithm always halts and thus, by the Church-Turing thesis, defines a computable function f . We now show that ⟨T, w⟩ ∈ ATM ⇐⇒ f (⟨T, w⟩) ∈ L1. • If ⟨T, w⟩ ∈ ATM, then T (w) accepts and the machine M constructed by f accepts all inputs. In particular, M halts on all inputs of length at most 2025. Thus, f (⟨T, w⟩) ∈ L1. • If ⟨T, w⟩ ̸∈ ATM, then the machine M constructed by f loops forever, on all inputs. Thus, M does not halt on inputs of length at most 2025 and f (⟨T, w⟩) ̸∈ L1. Therefore, we have that ATM ≤m L1. Since ATM is undecidable, we can conclude that L1 is undecidable as well. Page 2 (of 4) CS-251 Theory of Computation • Spring 2025 2b The language L2 is unrecognizable. We show that ATM ≤m L2, by constructing a com- putable f : Σ∗ → Σ∗ as follows. On input ⟨T, w⟩, do: 1. Construct a Turing machine M , which does the following on input x: (a) If T (w) accepts within |x| steps, enter an infinite loop. (b) Otherwise, accept. 2. Output ⟨M ⟩. This algorithm clearly halts on all inputs and thus, by the Church-Turing thesis, defines a computable function f . We now show that ⟨T, w⟩ ∈ ATM ⇐⇒ f (⟨T, w⟩) ∈ L2. • If ⟨T, w⟩ ∈ ATM, then T (w) does not accept and the machine M constructed by f accepts all strings. Hence, M halts on all inputs, in particular, all inputs of length at least 2025. We have ⟨M ⟩ ∈ L2. • If ⟨T, w⟩ ̸∈ ATM, then T (w) accepts within k steps for some k ∈ N. Hence, the machine M constructed by f loops on all inputs of length more than k, which implies that ⟨M ⟩ ̸∈ L2. Therefore, we have that ATM ≤m L2. Since ATM is unrecognizable, we can conclude that L2 is unrecognizable as well. 2c The language L3 is recognizable but not decidable. To show recognizability, we construct a Turing machine that recognizes L3. On input ⟨M ⟩, do: 1. For every n ∈ N: (a) For every w ∈ {0, 1}∗ such that |w| ≤ n i. If w contains more zeros than ones, simulate M (w) for n steps. ii. If this computation accepted, then accept. Consider some ⟨M ⟩ ∈ L3. Then, there exists some string w with more zeros than ones that is accepted by M . Therefore, the above algorithm will eventually find some n such that |w| ≤ n and M (w) accepts. Conversely, if ⟨M ⟩ ̸∈ L3 the above algorithm clearly does not halt. Thus, by the Church-Turing thesis, L3 is recognisable.. We show the undecidability of L3 by showing ATM ≤m L3. We construct f : Σ∗ → Σ∗ as follows. On input ⟨T, w⟩, do: 1. Construct a Turing machine M that simulates T (w). 2. Output ⟨M ⟩. This algorithm always halts and thus defines a computable f . We now show that ⟨T, w⟩ ∈ ATM ⇐⇒ f (⟨T, w⟩) ∈ L3. • If ⟨T, w⟩ ∈ ATM, then T (w) accepts, and the machine M given by f accepts on any input. Hence, ⟨M ⟩ ∈ L3 as desired. • If ⟨T, w⟩ ̸∈ ATM, then T (w) rejects, and the machine M given by f rejects all inputs. Hence, ⟨M ⟩ ̸∈ L3 as desired. Therefore, ATM ≤m L3. Since ATM is undecidable, L3 is undecidable as well. Page 3 (of 4) CS-251 Theory of Computation • Spring 2025 3 Let A and B be languages. Prove that if all of A ∩ B, A and B are Turing recognisable, then A ∩ B is Turing decidable. Solution: Turing decidable languages are closed under unions, since we can run the two recog- nisers in parallel and accept as soon as one of them accepts. Thus, A ∪ B = A ∩ B is also recognisable. But if a language and its complement are both recognisable, then the language is decidable. We conclude that A ∩ B is decidable. 4* Consider the language L = { ⟨M ⟩ : M is a Turing machine and ∃k ∈ N : M accepts every string of length ≥ k} . Prove that L is unrecognizable. Solution: We show that ATM ≤m L. We construct f as follows. On input ⟨T, w⟩, do: 1. Construct a Turing machine M that does the following on input x: (a) Simulate T (w) for |x| many steps. (b) If the computation accepted, enter an infinite loop. (c) Otherwise, accept. 2. Output ⟨M ⟩. This algorithm always halts. We show that ⟨T, w⟩ ∈ ATM ⇐⇒ f (⟨T, w⟩) ∈ L. • If ⟨T, w⟩ ∈ ATM, then T (w) rejects, and the machine M given by f accepts all input strings. Hence, ⟨M ⟩ ∈ L. • If ⟨T, w⟩ ̸∈ ATM, then T (w) accepts within l steps for some l ∈ N. Therefore, the machine M given by f loops forever on every input of length larger than l. We have that ⟨M ⟩ ̸∈ L. We can conclude that ATM ≤m L. Since ATM is unrecognizable, L is unrecognizable. Page 4 (of 4) CS-251 Theory of Computation • Spring 2025","libVersion":"0.5.0","langs":""}