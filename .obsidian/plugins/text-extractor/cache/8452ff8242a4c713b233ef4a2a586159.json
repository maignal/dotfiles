{"path":"Exercises/Solutions/ToC ex 3 sol.pdf","text":"Exercise III, Theory of Computation 2025 These exercises are for your own benefit. Feel free to collaborate and share your answers with other students. Solve as many problems as you can and ask for help if you get stuck for too long. Problems marked * are more difficult but also more fun :). These problems are taken from various sources at EPFL and on the Internet, too numer- ous to cite individually. 1 Prove that the language L = {0n21n | n ≥ 0} is not regular. Solution: The only technique to prove that a given language is not regular, that we know of, is using the pumping lemma: Assume for the sake of contradiction that L is regular. Then by the pumping lemma, L has a pumping length p. Now consider w = 0p21p ∈ L. The pumping lemma now tells us that we can decompose w as w = xyz, where |xy| ≤ p, |y| ≥ 1 and xyiz ∈ L for all i ≥ 0. Since w starts with p2 ≥ p zeros, xy and therefore also y consist entirely of only zeros. Since |y| ≥ 1, we have y = 0k for some integer k ≥ 1. But now if we just choose i = 2 for example, we deduce that xy2z = 0 p2+k1p ∈ L, a contradiction since p2 + k > p2. We conclude that L is not regular. In fact, any choice of i ̸= 1 would have done the job as well. 2 Prove that the language L = {0n1m | 0 ≤ n ≤ m OR 0 ≤ 2m ≤ n} is not regular. Solution: We again use the pumping lemma. Assume for the sake of contradiction that L is a regular language, let p be its pumping length, and consider w = 0 p+11p+1 ∈ L. By the pumping lemma, w can be decomposed as w = xyz, where |xy| ≤ p, |y| ≥ 1 and xyiz ∈ L for all i ≥ 0. Since w starts with p + 1 zeros, y = 0k for some integer k with 1 ≤ k ≤ p. But now, choosing i = 2, we find that xy2z = 0 p+1+k1 p+1 ∈ L. However, p + 1 < p + 1 + k < 2(p + 1) for any 1 ≤ k ≤ p, which contradicts the definition of L. Hence, L is not regular. Unlike in the previous exercise, here the choice of i = 2 was crucial. Page 1 (of 5) CS-251 Theory of Computation • Spring 2025 3 Let L be language over the singleton alphabet {1} consisting of all the strings whose lengths are prime numbers. Thus, L = {11, 111, 11111, 1111111, . . .}. Prove that L is not regular. Solution: Once again, we will make use of the pumping lemma. Suppose that L is a regular language with pumping length p. Let q be any prime number strictly greater than p, which exists since the set of prime numbers is infinite. Now w = 1q ∈ L can be decomposed as w = xyz, where |xy| ≤ p, |y| ≥ 1 and xyiz ∈ L for all i ≥ 0. Let us write y = 1k for some integer k ≥ 1. But now, for any i ≥ 0, xyiz = 1 q+(i−1)k ∈ L. But if we choose i = q+1 then q+(i−1)k = q+qk = q(k+1) is clearly composite, a contradiction. We conclude that L is not regular. Note that in this exercise, the choice of i in the pumping lemma was more subtle than in the previous two. In particular, it depended on the initial string w ∈ L we chose. 4 A palindrome is a string that reads the same forwards and backwards. Let L be the language over the alphabet {0, 1} consisting of all the palindromes. For example, we have 00 ∈ L, 10101 ∈ L and ε ∈ L. Prove that L is not regular. Solution: To no one’s surprise, we again use the pumping lemma. Suppose for the sake of contradiction that L is regular and let p be the pumping length of L. Consider the string w = 0p10p ∈ L. By the pumping lemma, w can be decomposed as w = xyz, where |xy| ≤ p, |y| ≥ 1 and xyiz ∈ L for all i ≥ 0. Since |xy| ≤ p, we have y = 0k for some k ≥ 1 and choosing i = 0, we obtain xz = 0 p−k10p ∈ L, which is a contradiction since the single 1 is not in the middle of the string. Hence, we can conclude that L is not regular. Note that any choice of i ̸= 1 would have done the job as well, and there are many different initial strings w ∈ L one could have considered. Page 2 (of 5) CS-251 Theory of Computation • Spring 2025 5 For any string w over the alphabet {0, 1}, define it’s balance by bal(w) = (number of 1s in w) − (number of 0s in w). 5a For some language L over the alphabet {0, 1}, define BL = {w ∈ {0, 1} ∗ | bal(w) = bal(u) for some u ∈ L}. If L is regular, must BL be regular as well? What about the other direction? 5b* Is the following language regular? L = {w ∈ {0, 1}∗ | −5 ≤ bal(s) ≤ 5 for every substring s of w} Hint: Keeptrackoftheextremalvaluesofbalforsubstringsendingatthecurrentposition. Solution: 5a The answer to the first question is no: There exists a regular language L such that BL is not regular. To prove this, consider the regular language L = {ε}. In this case, BL is the set of strings that contain an equal number of zeros and ones. We can now use the pumping lemma to show that BL is not regular: Assume for the sake of contradiction that BL is regular and let p be the pumping length of BL. Consider w = 0p1p ∈ BL and note that the pumping lemma guarantees that 0p+k1p ∈ BL for some k ̸= 0, a contradiction. The answer to the second question is no as well: There exists a non-regular language L for which BL is regular. Consider the language L = {0n1m | 0 ≤ n ≤ m OR 0 ≤ 2m ≤ n} from exercise 2, where we have seen that L is not regular. But now note that for every k ∈ Z, there is some u ∈ L with bal(u) = k, given by u = { 1k ∈ L if k ≥ 0 02|k|1|k| ∈ L if k < 0. Thus, we have BL = {0, 1}∗ which is clearly a regular language. 5b Yes, this language is regular. The key insight is that in order to check membership in L, all we need to keep in memory while traversing the string is the smallest and largest possible balance of a substring ending at the current position. If these values never leave the interval [−5, 5] until we reach the end of the string, then we accept our input, otherwise, we reject it. For a given position in some string w ∈ L, let x and y denote the smallest and largest balance of all substrings of w ending in that position. Note that x ≤ 0 and y ≥ 0 since we can always take into consideration the empty string which has balance 0. Also note that |x − y| ≤ 5 by definition of L, since otherwise the set-difference of the two witnessing substrings is a substring with disallowed balance. Page 3 (of 5) CS-251 Theory of Computation • Spring 2025 Formally, construct the DFA M = (Q, {0, 1}, δ, q0, F ) with • states Q = {(x, y) ∈ Z2 | x ≤ 0, y ≥ 0, |x − y| ≤ 5} ∪ {D}, • transition function δ : Q × Σ → Q given by δ((x, y), a) =    (x − 1, max{y − 1, 0} ) if a = 0, x > −5 D if a = 0, x = −5 ( min{0, x + 1}, y + 1) if a = 1, y < 5 D if a = 1, x = 5 and δ(D, a) = D for all (x, y) ∈ [−5, 0] × [0, 5] and both a ∈ {0, 1}, • start state q0 = (0, 0) ∈ Q, and • accepting states F = Q \\ {D}. The automaton is illustrated below. 0, 0 −1, 0 −2, 0 −3, 0 −4, 0 −5, 0 0, 1 −1, 1 −2, 1 −3, 1 −4, 1 0, 2 −1, 2 −2, 2 −3, 2 0, 3 −1, 3 −2, 3 0, 4 −1, 4 0, 5 D 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0,1 If x ∈ L, then M never goes to D and thus accepts. Conversely, if x ̸∈ L then this is witnessed by some substring s of w with balance bal(s) ̸∈ [−5, 5] and at the latest after reading the last symbol of s, M will go to state D and thus reject. We conclude that L(M ) = L and therefore that L is regular. Page 4 (of 5) CS-251 Theory of Computation • Spring 2025 6* Let L be a language that satisfies the condition of the pumping lemma. Must L be regular? Hint: Modifythepumpinglemmatolookatthebackofthestringinsteadofthefront. Solution: The answer is no, we can construct a language that satisfies the condition of the pumping lemma but is not regular. But how are we going to show that our constructed language is not regular if we cannot use the pumping lemma to get a contradiction? Well, since the pumping lemma is the only tool we know for proving a language not regular, the only option is to reuse the ideas behind the pumping lemma but apply them slightly differently. Consider the language L = {u01 p | u ∈ {0, 1} ∗, p is a prime number} ∪ {1} ∗. It is not hard to check that L satisfies the condition of the pumping lemma with pumping length p = 1, by showing that any word in L stays in L after pumping up (or removing) the first symbol. Now note that in the proof of the pumping lemma we made the somewhat arbitrary choice to look for a repeating state at the beginning of the DFA computation. More generally, if p is the pumping length of L, there must be a repeating state among any p consecutive steps of the computation. In particular, we can get another version of the pumping lemma that finds a substring to pump towards the end of the string: Backwards Pumping Lemma. For any regular language A, there is an integer p ≥ 1 such that every w ∈ A can be written w = xyz with |yz| ≤ p, |y| ≥ 1 and xyiz ∈ A for all i ≥ 0. But this version of the pumping lemma now shows that L is not regular: If it were and had pumping length p, then for some prime q ≥ p, we could pump up the end of 01q ∈ L to obtain 01k ∈ L for some composite k, just like in exercise 3. Thus, we conclude that while satisfying the condition of the original pumping lemma, the language L is not regular. Page 5 (of 5) CS-251 Theory of Computation • Spring 2025","libVersion":"0.5.0","langs":""}