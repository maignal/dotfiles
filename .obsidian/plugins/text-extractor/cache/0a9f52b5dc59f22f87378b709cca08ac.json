{"path":"Lectures/Lecture10.pdf","text":"Lecture 10: NP-completeness: Subset-sum Mika Göös School of Computer and Communication Sciences Lecture 10 Recap: NP-completeness reductions Lecture 10 NP-completeness Deﬁnition: A language L is said to be NP-complete if ▶ L is in NP. ▶ For every language L′ in NP, L ′ ≤P L. Observe: If one NP-complete language has a polynomial time decider, then every language in NP has a polynomial time decider, i.e. P = NP. The Cook–Levin Theorem: SAT is NP-complete. To show L is NP-complete: ▶ [NP membership] Give a poly-time veriﬁer for L. ▶ [NP hardness] Show C ≤P L for some NP-complete language C (not the other way around) Lecture 10 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM Lecture 10 3SAT is NP-complete kSAT = {⟨ϕ⟩ : ϕ is satisﬁable and each clause of ϕ contains ≤ k literals} Veriﬁer for 3SAT: Just use the veriﬁer for SAT. Claim: SAT ≤P 3SAT Reduction: Given ϕ, ▶ While ϕ contains a clause K = (ℓ1 ∨ ℓ2 ∨ ℓ3 ∨ · · · ∨ ℓm) with > 3 literals Replace K with the following two clauses K1 = (ℓ1 ∨ ℓ2 ∨ z) K2 = (z ∨ ℓ3 ∨ · · · ∨ ℓm)    Preserves satisﬁability (check!) What is the runtime? Does SAT ≤P 2SAT analogously? Lecture 10 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM Lecture 10 INDSET is NP-complete Claim: SAT ≤P INDSET ϕ = x1︸︷︷︸ K1 ∧ (x1 ∨ x2) ︸ ︷︷ ︸ K2 ∧ (x1 ∨ x2 ∨ x3) ︸ ︷︷ ︸ K3 ∧ (x1 ∨ x2 ∨ x3 ∨ x4) ︸ ︷︷ ︸ K4 x1 x1 x2 x1 x2 x3 x1 x2 x3 x4 K1 K2 K3 K4 Lecture 10 INDSET is NP-complete Claim: SAT ≤P INDSET Reduction f : On input ϕ, 1 Let G be the graph generated as follows. 1 Take a vertex for each literal of each clause. 2 Add edges for pairs of conﬂicting literals. 3 Add edges for pairs of literals from the same clause. 2 Let m be the number of clauses in ϕ. 3 Output (G, m). Claim: ϕ ∈ SAT =⇒ f (ϕ) ∈ INDSET Proof: C : satisfying assignment of ϕ. Pick one true literal from each clause. The corresponding vertices form a independent set. Claim: f (ϕ) ∈ INDSET =⇒ ϕ ∈ SAT Proof: C : independent set in G, |C | = m. C contains one vertex from each group. Set the corresponding literals to true to get a satisfying assignment. Lecture 10 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM Lecture 10 CLIQUE CLIQUE Defn: A 𝑘-clique is a subset of 𝑘pairwise connected vertices 𝐷 𝐴 𝐵 𝐶 𝐹 𝐺,3 ∈𝐶𝐿𝐼𝑄𝑈𝐸? 𝐺,4 ∈𝐶𝐿𝐼𝑄𝑈𝐸? No 4-clique 𝐴,𝐵,𝐹 is a 3-clique 𝐶𝐿𝐼𝑄𝑈𝐸= 𝐺,𝑘 𝐺 hasacliqueofsize𝑘} 𝐸 A,B,F is a 3-clique Deﬁnition: A k-clique is a subset of k pairwise connected vertices CLIQUE = {⟨G, k⟩ | G has a clique of size k} ⟨G, 3⟩ ∈ CLIQUE ? Yes ⟨G, 4⟩ ∈ CLIQUE ? No Lecture 10 INDSET vs CLIQUE For a graph G: Independent set: A subset of pairwise non-adjacent vertices Clique: A subset of pairwise adjacent vertices INDSET vs CLIQUE For a graph 𝐺: Independent set: A subset of pairwise non-adjacent vertices Clique: A subset of pairwise adjacent vertices Observation: If 𝐺is a graph and ҧ𝐺is its complement, then a subset 𝑆 of the vertices of 𝐺is an independent set iff 𝑆 is a clique of ҧ𝐺 Definition (Complement): The complement of a graph 𝐺=(𝑉,𝐸)is a graph ҧ𝐺=(𝑉,ഥ𝑬)with the same vertex set and the edge set ത𝐸 s.t. 𝑢𝑣 ∈ ത𝐸 iff 𝑢𝑣 ∉ 𝐸 T𝐡𝐞𝐨𝐫𝐞𝐦:𝐶𝐿𝐼𝑄𝑈𝐸≤𝑃𝐼𝑁𝐷𝑆𝐸𝑇and 𝐼𝑁𝐷𝑆𝐸𝑇≤𝑃𝐶𝐿𝐼𝑄𝑈𝐸 Def (Complement): The complement of a graph G = (V , E ) is a graph ¯G = (V , ¯E ) with same vertex set and edge set ¯E s.t. uv ∈ ¯E iﬀ uv < E Observation: If G is a graph and ¯G its complement, then a subset S of the vertices of G is an independent set iﬀ S is a clique of ¯G Lecture 10 INDSET ≤p CLIQUE Reduction: f (⟨G = (V , E ), k⟩) := ⟨ ¯G = (V , ¯E ), k⟩ Eﬃciency: The reduction is polynomial time Correctness: ⟨G, k⟩ ∈ INDSET ⇔ ⟨ ¯G, k⟩ ∈ CLIQUE Proof of correctness: INDSET vs CLIQUE 𝐼𝑁𝐷𝑆𝐸𝑇≤𝑃𝐶𝐿𝐼𝑄𝑈𝐸 1. Reduction: 𝑓 𝐺= 𝑉,𝐸 ,𝑘 ≔ ҧ𝐺=(𝑉,ത𝐸),𝑘 2. Efficiency: The reduction is polynomial time 3. Correctness: 𝐺,𝑘 ∈𝐼𝑁𝐷𝑆𝐸𝑇⇔ ഥ𝐺,𝑘 ∈𝐶𝐿𝐼𝑄𝑈𝐸 ⇒⇔ Similarly: 𝐶𝐿𝐼𝑄𝑈𝐸≤𝑃INDSET Proof of correctness: 𝑎 𝑏 𝑐 𝑑 𝑒 𝑔 𝑎 𝑏 𝑐 𝑑 𝑒 𝑔 𝐺,𝑘 ∈𝐼𝑁𝐷𝑆𝐸𝑇,𝑆 =𝑘 𝑆 ҧ𝐺,𝑘 ∈𝐶𝐿𝐼𝑄𝑈𝐸 𝑆 Lecture 10 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM Lecture 10 Vertex Cover Deﬁnition: For a graph G = (V , E ), a vertex cover is a subset S of V such that every edge of G is incident to at least one vertex in S Example Vertex Cover Definition: For a graph 𝐺(𝑉,𝐸),a vertex cover is a subset 𝑆 of 𝑉such that every edge of 𝐺is incident with at least one vertex in 𝑆 Example: Definition: 𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅={ 𝐺,𝑘:𝐺is a graph that has a vertex cover of size 𝑘} 𝐺 𝐺,4 ∈𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅? 𝐺,3 ∈𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅? Deﬁnition: VERTEX COVER = {⟨G, k⟩ : G is a graph that has a vertex cover of size k} ▶ ⟨G, 4⟩ ∈ VERTEX COVER? Yes ▶ ⟨G, 3⟩ ∈ VERTEX COVER? No Lecture 10 INDSET vs VERTEX COVER Lemma: For every graph G, a subset S of the vertices is a vertex cover if and only if ¯S is an independent set where ¯S = V \\ S Vertex Covers vs Independent Sets 𝐺 𝑆 Vertex cover Since 𝑆is a vertex cover, such an edge cannot exist. Theorem: For every graph 𝐺,a subset 𝑆of the vertices is a vertex cover if and only if ҧ𝑆is an independent set where ҧ𝑆=𝑉\\𝑆 Independent set Corollary: For every graph 𝐺and a positive integer 𝑘,𝐺has an independent set of size 𝑘iff 𝐺has a vertex cover of size 𝑛−𝑘 Corollary: For every graph G and a positive integer k, G has an independent set of size k iﬀ G has a vertex cover of size n − k Lecture 10 INDSET ≤p VERTEX COVER Reduction: f (⟨G, k⟩) := ⟨G, n − k⟩, where n is the number of vertices of G Eﬃciency: The reduction f is polynomial time Correctness: Lemma/Corollary on previous slide! VERTEX COVER is NP-Complete STEP 1: VERTEX COVER ∈ NP TM V: “On input 𝐺,𝑘,𝐶 1. IF 𝐶 ≠𝑘,THEN, REJECT 2. FOR every pair 𝑢 ≠𝑣 of vertices DO 1. IF 𝑢𝑣 is an edge AND 𝑢 ∉ 𝐶 AND 𝑣 ∉ 𝐶, THEN REJECT 3. ACCEPT” STEP 2: 𝐼𝑁𝐷𝑆𝐸𝑇≤𝑃𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅. Reduction: 𝑓 𝐺,𝑘 ≔ 〈𝐺,𝑛−𝑘〉where 𝑛is the number of vertices of 𝐺. 𝐺,𝑘 ∈ 𝐼𝑁𝐷𝑆𝐸𝑇⟺ ⟺ 𝐺,𝑛−𝑘 ∈ 𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅 𝐺 Efficiency: 𝑓is (obviously) polynomial time computable Correctness: Theorem on previous slide! Lecture 10 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM Lecture 10 Set Cover Deﬁnition: Let U = {1, . . . , n} and F = {T1, . . . , Tm} be a family of subsets ∀i, Ti ⊆ U A subset {Ti1, . . . , Tik } ⊆ F is called a set cover of size k if ⋃k j=1 Tij = U 𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅 3 1 2 4 7 5 6 9 8 Definition: Let 𝑈 ={1,…,𝑛}and ℱ= 𝑇1,…,𝑇𝑚 be a family of its subsets ∀𝑖,𝑇𝑖 ⊆𝑈 A subset 𝑇𝑖1,…,𝑇𝑖𝑘 ⊆ℱis called a set cover of size 𝑘if ∪𝑗=1 𝑘 𝑇𝑖𝑗 =𝑈 𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅≔ {𝑈,ℱ,𝑘 ∶ℱcontains a set cover of size 𝑘} Example: 𝑈,ℱ,3 ∈𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅? 𝑈,ℱ,2 ∈𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅? {1,2,4,3,6,5,{4,7,8,9}} 𝑈 SET COVER = {⟨U, F, k⟩ | F contains a set cover of size k} Example: ▶ ⟨U, F, 3⟩ ∈ SET COVER? Yes {{1, 2, 4}, {3, 6, 4}, {4, 7, 8, 9}} ▶ ⟨U, F, 2⟩ ∈ SET COVER? No Lecture 10 VERTEX COVER ≤p SET COVER Key idea: VERTEX COVER is a special case of SET COVER Example: V𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅≤𝑃𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅 Reduction: •Let 𝐺=(𝑉,𝐸),𝑘 be an instance of 𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅 •Set 𝑈 ≔ 𝐸 •For every vertex 𝑣∈𝑉 create a set 𝑆𝑣 𝑆𝑣≔ 𝑒∈𝐸:𝑒isincidentto 𝑣 •Let ℱ≔ 𝑆𝑣∶𝑣∈𝑉 and set 𝑘′=𝑘 𝑒1 𝑒2 𝑒3 𝑒4 𝑒5 𝑈 = 𝑒1,𝑒2,𝑒3,𝑒4,𝑒5 ℱ={ 𝑒1,𝑒4 ,𝑒1,𝑒2,𝑒5 , 𝑒2,𝑒3 ,𝑒3,𝑒4,𝑒5 } 𝑘′=𝑘=2𝑘=2 Example: Key Idea: 𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅is a special case of 𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅 Efficiency: Obvious from the construction Reduction: ▶ Let ⟨G = (V , E ), k⟩ be an instance of VERTEX COVER ▶ Set U := E ▶ For every vertex v ∈ V create a set Sv Sv := {e ∈ E | e is incident to v } ▶ Let F := {Sv | v ∈ V } and set k ′ = k Eﬃciency: Obvious from construction Lecture 10 Correctness (⇒): If G has a vertex cover of cardinality k, then U can be covered by k sets Proof: ▶ Suppose C ⊆ V is a vertex cover of G and |C | = k ▶ Every edge ei is adjacent to at least one vertex in C ⋃ v ∈C Sv = E ▶ Hence U can be covered by k sets Correctness (⇐): If U can be covered by k sets, then G has a vertex cover of cardinality k Proof: ▶ Let Sv1 , Sv2 , . . . , Svk be a collection of sets which cover U = E ▶ We claim that C = {v1, v2, . . . , vk } is a vertex cover of G ▶ Indeed, every edge e in G belongs to Svi for some i ∈ {1, 2, . . . , k} ▶ Hence, every edge e in G is incident to some vertex vi ∈ C Lecture 10 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM Lecture 10 SUBSET-SUM Let X denote a (multi) set of positive integers Deﬁnition: SUBSET-SUM = {⟨X , s⟩ : X contains a subset whose elements sum to s} Example: X = {1, 3, 4, 6, 13, 13} ▶ ⟨X , 8⟩ ∈ SUBSET-SUM? Yes T = {1, 3, 4} ▶ ⟨X , 12⟩ ∈ SUBSET-SUM? No Question: SUBSET-SUM ∈ P? It depends on the input length Lecture 10 SUBSET-SUM •Let 𝑋be a (multi) set of positive integers •Definition: 𝑆𝑈𝐵𝑆𝐸𝑇−𝑆𝑈𝑀 ≔ { 𝑋,𝑠:𝑋contains a subset whose elements sum to 𝑠} •Example: 𝑋= 1,3,4,6,13,13 • 𝑋,8 ∈𝑆𝑈𝐵𝑆𝐸𝑇−𝑆𝑈𝑀? • 𝑋,12∈𝑆𝑈𝐵𝑆𝐸𝑇−𝑆𝑈𝑀? •Question: Does 𝑆𝑈𝐵𝑆𝐸𝑇−𝑆𝑈𝑀 ∈𝑃? •Input length 1 * 1 1 1 * 1 1 1 1 1 * 1 1 1 1 ⊔ 𝑇 ≔ {1,3,4} Unary vs Binary 1 * 1 1 * 1 0 1 * 1 0 0 ⊔ Input length: 𝑥1+𝑥2+⋯+𝑥𝑚 +𝑠 ≫ Input length: ⌈log(𝑥1)⌉+⋯+⌈log(𝑥𝑚)⌉+⌈log(𝑠)⌉ 〈1,3,5,4〉 〈1,3,5,4〉 1 3 5 4 1 3 5 4 In 𝑆𝑈𝐵𝑆𝐸𝑇-𝑆𝑈𝑀 we use binary encoding Lecture 10 SUBSET-SUM: An Algorithm 𝑆𝑈𝐵𝑆𝐸𝑇-𝑆𝑈𝑀: An Algorithm Running time: For the input {𝑥1,… ,𝑥𝑚},𝑠 ,the above algorithm takes 𝑂 𝑚 ⋅σ𝑖=1 𝑚 𝑥𝑖 steps to output whether or not 𝑋,𝑠 ∈𝑆𝑈𝐵𝑆𝐸𝑇-𝑆𝑈𝑀 • Let 𝑋= 𝑥1,𝑥2,… ,𝑥𝑚 , 𝑠𝑢𝑚≔ σ𝑗=1 𝑚 𝑥𝑗 • FOR 𝑖 =1. . 𝑚 DO • FOR 𝑗 =0. . 𝑠𝑢𝑚DO • 𝐴 𝑖,𝑗 : =𝐹𝑎𝑙𝑠𝑒 • FOR 𝑖 =0to 𝑚 DO • 𝐴 𝑖,0 ≔ 𝑇𝑟𝑢𝑒 • FOR 𝑖 =1. . 𝑚 DO • FOR 𝑗 =1. . 𝑠𝑢𝑚DO • IF 𝐴 𝑖 −1,𝑗 −𝑥𝑖 =𝑇𝑟𝑢𝑒OR 𝐴 𝑖 −1,𝑗 =𝑇𝑟𝑢𝑒THEN 𝐴 𝑖,𝑗 : =𝑇𝑟𝑢𝑒 • IF 𝑨𝒎,𝒔 =𝑻𝒓𝒖𝒆,ACCEPT; ELSE, REJECT Unary representation: The length of the input 𝑥1+𝑥2+⋯+𝑥𝑚 +𝑠. In this case the running time is polynomial in the input length Binary representation: The length of the input ⌈log(𝑥1)⌉+⋯+⌈log(𝑥𝑚)⌉+⌈log(𝑠)⌉. In this case, the running time is exponential in the input length Lecture 10 SUBSET-SUM is NP-Complete Theorem: SET COVER ≤p SUBSET-SUM Corollary: SUBSET-SUM is NP-Complete Indeed, SUBSET-SUM ∈ NP as it is easy to verify in polynomial time that ∑ x ∈S x = s for a given subset S ⊆ X . Lecture 10 SET COVER vs SUBSET-SUM The goal: SET COVER ≤p SUBSET-SUM SET COVER SUBSET SUM INPUT: ▶ U = {1, 2, . . . , n} ▶ A family F = {T1, . . . , Tm} of subsets of U ▶ A number k ▶ A set of positive integers X = {x1, . . . , xℓ} ▶ A positive integer s GOAL: Select k elements of F whose union is U Select a subset of X whose sum of elements is s First Question: How to map subsets to numbers? Lecture 10 Encoding subsets as numbers Idea 1 (Vector representation): Think of sets as 0-1 vectors! U = 1 2 3 4 . . . n − 1 n Lecture 10 Encoding subsets as numbers Idea 1 (Vector representation): Think of sets as 0-1 vectors! U = 1 2 3 4 . . . n − 1 n T = {2, 3, n} is then encoded by T → 0 1 1 0 . . . 0 1 How to assign a number to this length-n vector? 2n−1 2n−2 2n−3 . . . 21 2 0 b1 b2 b3 bn−1 bnBinary: ∑n j=1 bj 2 n−j Lecture 10 Encoding subsets as numbers Idea 1 (Vector representation): Think of sets as 0-1 vectors! U = 1 2 3 4 . . . n − 1 n T = {2, 3, n} is then encoded by T → 0 1 1 0 . . . 0 1 How to assign a number to this length-n vector? 2 n−1 2n−2 2 n−3 . . . 2 1 20 b1 b2 b3 bn−1 bn c n−1 c n−2 c n−3 . . . c 1 c 0 b1 b2 b3 bn−1 bn Binary: ∑n j=1 bj 2 n−j c-ary: ∑n j=1 bj c n−j (for c ∈ N) Lecture 10 Reduction: Part 1 (encoding sets as numbers) ⟨U = {1, . . . , n}, F = {T1, T2, . . . , Tm}, k⟩ =⇒ X = {a1, . . . , am} in which Ti =⇒ 0 1 . . . 1 =⇒ 0 1 . . . 1 c =⇒ ai = ∑n j=1 bj c n−j ▶ We set the value of c later Lecture 10 How to pick s? The reduction should ensure that: ⟨U, F , k⟩ ∈ SET COVER ⇒ ⟨X , s⟩ ∈ SUBSET-SUM One example: suppose there exist k sets Ti1 = · · · = Tik = U 0 1 … 1 … 1 Reduction: Part 2 (How to pick 𝑠𝑠?) The reduction should ensure that: 𝑈𝑈, ℱ, 𝑘𝑘 ∈𝑆𝑆𝑈𝑈𝑈𝑈𝑆𝑆𝑆𝑆𝑉𝑉𝑈𝑈𝑆𝑆 ⟹ 𝑋𝑋, 𝑠𝑠 ∈𝑆𝑆𝑈𝑈𝑈𝑈𝑆𝑆𝑈𝑈𝑈𝑈-𝑆𝑆𝑈𝑈𝑆𝑆 𝑈𝑈𝑖𝑖1 → 𝑈𝑈𝑖𝑖𝑘𝑘 → ⋮ ⋮ ⋮ One instance of a set cover: suppose there exist 𝑘𝑘 sets 𝑈𝑈𝑖𝑖1= ⋯ = 𝑈𝑈𝑖𝑖𝑘𝑘 = 𝑈𝑈 More generally: ⋃𝑗𝑗=1 𝑘𝑘 𝑈𝑈𝑖𝑖𝑗𝑗 = 𝑈𝑈 but sets not identical 1 2 𝑖𝑖 … 𝑛𝑛 Observation: Since ∪𝑗𝑗=1 𝑘𝑘 𝑈𝑈𝑖𝑖𝑗𝑗 = 𝑈𝑈, ∀ℎ , 𝟏𝟏≤𝒕𝒕𝒉𝒉 ≤𝒌𝒌 0 1 … 1 … 1𝑎𝑎𝑖𝑖1≔ 𝑎𝑎𝑖𝑖𝑘𝑘 ≔ 1 1 … 0 … 0 𝑡𝑡1 𝑡𝑡2 … 𝑡𝑡ℎ … 𝑡𝑡𝑛𝑛 + + 𝑐𝑐 𝑐𝑐 𝑐𝑐 ⋮⋮ 1 1 … 1𝑈𝑈𝑖𝑖1 → 𝑈𝑈𝑖𝑖𝑘𝑘 → 1 1 … 1 ⋮ ⋮ ⋮ 1 2 … 𝑛𝑛 1 1 … 1 … 1𝑎𝑎𝑖𝑖1≔ 𝑎𝑎𝑖𝑖𝑘𝑘 ≔ 1 1 … 1 … 1 𝑘𝑘 𝑘𝑘 … 𝑘𝑘 … 𝑘𝑘s = + + 𝑐𝑐 𝑐𝑐 𝑐𝑐 ⋮⋮ 1 1 … 0 … 0 𝑘𝑘 𝑘𝑘 … 𝑘𝑘 How to make it \" = \" ? Σ𝑗𝑗=1 𝑘𝑘 𝑎𝑎𝑖𝑖𝑗𝑗 = 𝑡𝑡1 𝑡𝑡2 … 𝑡𝑡𝑛𝑛 ≤ 𝑐𝑐 𝑐𝑐 Idea 2 (Additional numbers): The reduction, ∀1 ≤ℎ ≤𝑛𝑛, adds 𝑘𝑘 −1 integers 𝒃𝒃𝒉𝒉: = to 𝑿𝑿 𝑗𝑗-th position 𝑐𝑐0 0 … 1 … 0 By adding 𝒌𝒌 −𝒕𝒕𝒉𝒉 of each 𝑏𝑏ℎ’s, we ensure: if ∪𝒋𝒋=𝟏𝟏 𝒌𝒌 𝑺𝑺𝒊𝒊𝒋𝒋 = 𝑺𝑺 then ∑𝒋𝒋=𝟏𝟏 𝒌𝒌 𝒂𝒂𝒊𝒊𝒋𝒋 + ∑𝒉𝒉=𝟏𝟏 𝒏𝒏 𝒌𝒌 −𝒕𝒕𝒉𝒉 𝒃𝒃𝒉𝒉 = 𝒔𝒔 More generally: ⋃k j=1 Tij = U but sets not identical 0 1 … 1 … 1 Reduction: Part 2 (How to pick 𝑠𝑠?) The reduction should ensure that: 𝑈𝑈, ℱ, 𝑘𝑘 ∈𝑆𝑆𝑈𝑈𝑈𝑈𝑆𝑆𝑆𝑆𝑉𝑉𝑈𝑈𝑆𝑆 ⟹ 𝑋𝑋, 𝑠𝑠 ∈𝑆𝑆𝑈𝑈𝑈𝑈𝑆𝑆𝑈𝑈𝑈𝑈-𝑆𝑆𝑈𝑈𝑆𝑆 𝑈𝑈𝑖𝑖1 → 𝑈𝑈𝑖𝑖𝑘𝑘 → ⋮ ⋮ ⋮ One instance of a set cover: suppose there exist 𝑘𝑘 sets 𝑈𝑈𝑖𝑖1= ⋯ = 𝑈𝑈𝑖𝑖𝑘𝑘 = 𝑈𝑈 More generally: ⋃𝑗𝑗=1 𝑘𝑘 𝑈𝑈𝑖𝑖𝑗𝑗 = 𝑈𝑈 but sets not identical 1 2 𝑖𝑖 … 𝑛𝑛 Observation: Since ∪𝑗𝑗=1 𝑘𝑘 𝑈𝑈𝑖𝑖𝑗𝑗 = 𝑈𝑈, ∀ℎ , 𝟏𝟏≤𝒕𝒕𝒉𝒉 ≤𝒌𝒌 0 1 … 1 … 1𝑎𝑎𝑖𝑖1≔ 𝑎𝑎𝑖𝑖𝑘𝑘 ≔ 1 1 … 0 … 0 𝑡𝑡1 𝑡𝑡2 … 𝑡𝑡ℎ … 𝑡𝑡𝑛𝑛 + + 𝑐𝑐 𝑐𝑐 𝑐𝑐 ⋮⋮ 1 1 … 1𝑈𝑈𝑖𝑖1 → 𝑈𝑈𝑖𝑖𝑘𝑘 → 1 1 … 1 ⋮ ⋮ ⋮ 1 2 … 𝑛𝑛 1 1 … 1 … 1𝑎𝑎𝑖𝑖1≔ 𝑎𝑎𝑖𝑖𝑘𝑘 ≔ 1 1 … 1 … 1 𝑘𝑘 𝑘𝑘 … 𝑘𝑘 … 𝑘𝑘s = + + 𝑐𝑐 𝑐𝑐 𝑐𝑐 ⋮⋮ 1 1 … 0 … 0 𝑘𝑘 𝑘𝑘 … 𝑘𝑘 How to make it \" = \" ? Σ𝑗𝑗=1 𝑘𝑘 𝑎𝑎𝑖𝑖𝑗𝑗 = 𝑡𝑡1 𝑡𝑡2 … 𝑡𝑡𝑛𝑛 ≤ 𝑐𝑐 𝑐𝑐 Idea 2 (Additional numbers): The reduction, ∀1 ≤ℎ ≤𝑛𝑛, adds 𝑘𝑘 −1 integers 𝒃𝒃𝒉𝒉: = to 𝑿𝑿 𝑗𝑗-th position 𝑐𝑐0 0 … 1 … 0 By adding 𝒌𝒌 −𝒕𝒕𝒉𝒉 of each 𝑏𝑏ℎ’s, we ensure: if ∪𝒋𝒋=𝟏𝟏 𝒌𝒌 𝑺𝑺𝒊𝒊𝒋𝒋 = 𝑺𝑺 then ∑𝒋𝒋=𝟏𝟏 𝒌𝒌 𝒂𝒂𝒊𝒊𝒋𝒋 + ∑𝒉𝒉=𝟏𝟏 𝒏𝒏 𝒌𝒌 −𝒕𝒕𝒉𝒉 𝒃𝒃𝒉𝒉 = 𝒔𝒔 Lecture 10 Reduction: Part 2 (selecting s) 0 1 … 1 … 1 Reduction: Part 2 (How to pick 𝑠𝑠?) The reduction should ensure that: 𝑈𝑈, ℱ, 𝑘𝑘 ∈𝑆𝑆𝑈𝑈𝑈𝑈𝑆𝑆𝑆𝑆𝑉𝑉𝑈𝑈𝑆𝑆 ⟹ 𝑋𝑋, 𝑠𝑠 ∈𝑆𝑆𝑈𝑈𝑈𝑈𝑆𝑆𝑈𝑈𝑈𝑈-𝑆𝑆𝑈𝑈𝑆𝑆 𝑈𝑈𝑖𝑖1 → 𝑈𝑈𝑖𝑖𝑘𝑘 → ⋮ ⋮ ⋮ One instance of a set cover: suppose there exist 𝑘𝑘 sets 𝑈𝑈𝑖𝑖1= ⋯ = 𝑈𝑈𝑖𝑖𝑘𝑘 = 𝑈𝑈 More generally: ⋃𝑗𝑗=1 𝑘𝑘 𝑈𝑈𝑖𝑖𝑗𝑗 = 𝑈𝑈 but sets not identical 1 2 𝑖𝑖 … 𝑛𝑛 Observation: Since ∪𝑗𝑗=1 𝑘𝑘 𝑈𝑈𝑖𝑖𝑗𝑗 = 𝑈𝑈, ∀ℎ , 𝟏𝟏≤𝒕𝒕𝒉𝒉 ≤𝒌𝒌 0 1 … 1 … 1𝑎𝑎𝑖𝑖1≔ 𝑎𝑎𝑖𝑖𝑘𝑘 ≔ 1 1 … 0 … 0 𝑡𝑡1 𝑡𝑡2 … 𝑡𝑡ℎ … 𝑡𝑡𝑛𝑛 + + 𝑐𝑐 𝑐𝑐 𝑐𝑐 ⋮⋮ 1 1 … 1𝑈𝑈𝑖𝑖1 → 𝑈𝑈𝑖𝑖𝑘𝑘 → 1 1 … 1 ⋮ ⋮ ⋮ 1 2 … 𝑛𝑛 1 1 … 1 … 1𝑎𝑎𝑖𝑖1≔ 𝑎𝑎𝑖𝑖𝑘𝑘 ≔ 1 1 … 1 … 1 𝑘𝑘 𝑘𝑘 … 𝑘𝑘 … 𝑘𝑘s = + + 𝑐𝑐 𝑐𝑐 𝑐𝑐 ⋮⋮ 1 1 … 0 … 0 𝑘𝑘 𝑘𝑘 … 𝑘𝑘 How to make it \" = \" ? Σ𝑗𝑗=1 𝑘𝑘 𝑎𝑎𝑖𝑖𝑗𝑗 = 𝑡𝑡1 𝑡𝑡2 … 𝑡𝑡𝑛𝑛 ≤ 𝑐𝑐 𝑐𝑐 Idea 2 (Additional numbers): The reduction, ∀1 ≤ℎ ≤𝑛𝑛, adds 𝑘𝑘 −1 integers 𝒃𝒃𝒉𝒉: = to 𝑿𝑿 𝑗𝑗-th position 𝑐𝑐0 0 … 1 … 0 By adding 𝒌𝒌 −𝒕𝒕𝒉𝒉 of each 𝑏𝑏ℎ’s, we ensure: if ∪𝒋𝒋=𝟏𝟏 𝒌𝒌 𝑺𝑺𝒊𝒊𝒋𝒋 = 𝑺𝑺 then ∑𝒋𝒋=𝟏𝟏 𝒌𝒌 𝒂𝒂𝒊𝒊𝒋𝒋 + ∑𝒉𝒉=𝟏𝟏 𝒏𝒏 𝒌𝒌 −𝒕𝒕𝒉𝒉 𝒃𝒃𝒉𝒉 = 𝒔𝒔 Observation: Since ⋃k j=1 Tij = U, ∀h, 1 ≤ th ≤ k Idea 2 (additional numbers) The reduction adds to X for every h ∈ {1, 2, . . . , n}, k − 1 integers bh = 0 0 . . . 1 h-th pos . . . 0 c By adding k − th of each bh’s, we ensure: if ⋃k j=1 Tij = U then ∑k j=1 aij + ∑n h=1(k − th)bh = s Lecture 10 What about the other direction? Suppose: ⟨X , s⟩ ∈ SUBSET-SUM Thus ∃ai1 , . . . , aip , b1, . . . , b1︸ ︷︷ ︸ r1 times , . . . , bn . . . , bn︸ ︷︷ ︸ rn times ∈ X s.t. p∑ j=1 aij + r1 · b1 + · · · rn · bn = s = k . . . k c Claim: ∀h ∈ {1, . . . , n}, ∃q ∈ {1, . . . , p} s.t. the h:th coordinate of aiq is 1 Proof: ▶ Crucial idea: force no carry over by selecting c large enough (c = m + kn + 1 larger than the number of summands) ▶ The h-th digit of ∑p j=1 aij + r1 · · · b1 + · · · + rn · bn is k ▶ Since rh ≤ k − 1 this means that the h-th digit of some aiq must be 1 Corollary: Ti1 ∪ Ti2 ∪ · · · ∪ Tip = U Proof: ▶ ∀h ∈ {1, . . . , n}, the h-th coordinate of aiq is 1 iﬀ h ∈ Tiq (by the reduction) ▶ Thus, at least one of the subsets Ti1 , . . . , Tip contains h Final question: Ti1 ∪ · · · ∪ Tip = U ⇒ ⟨U, F , k⟩ ∈ SET COVER? only if p = k Lecture 10 Reduction part 3 Idea 3 (enforce p = k): Introduce a new coordinate in the leftmost position of ai ’s, bi ’s and s Reduction: Part 3 𝑎𝑎𝑖𝑖 ≔ 0 0 0 … 1 … 0 𝑐𝑐 Idea 3 (Enforce 𝒑𝒑= 𝒌𝒌): Introduce a new coordinate in the leftmost positions of 𝑎𝑎𝑖𝑖’s, 𝑏𝑏𝑖𝑖’s and 𝑠𝑠 0 1 … 1𝑈𝑈𝑖𝑖 𝑏𝑏𝑗𝑗 ≔ 1 0 1 … 0 𝑘𝑘 𝑘𝑘 𝑘𝑘 … 𝑘𝑘 … 𝑘𝑘𝑠𝑠 ≔ 𝑐𝑐 𝑐𝑐 𝑛𝑛 + 1 (𝑗𝑗 + 1)-st position Claim: If Σ𝑗𝑗=1 𝑝𝑝 𝑎𝑎𝑖𝑖𝑗𝑗+ 𝑟𝑟1⋅𝑏𝑏1+ ⋯+ 𝑟𝑟𝑛𝑛⋅𝑏𝑏𝑛𝑛= 𝑠𝑠, then 𝑝𝑝= 𝑘𝑘 Proof: 1. The leftmost digit of 𝛴𝛴𝑗𝑗=1 𝑝𝑝 𝑎𝑎𝑖𝑖𝑗𝑗+ 𝑟𝑟1⋅𝑏𝑏1+ ⋯+ 𝑟𝑟𝑛𝑛⋅𝑏𝑏𝑛𝑛is 𝑘𝑘 (base c) 2. The leftmost digit of 𝑏𝑏𝑖𝑖 is 0 3. The leftmost digit of 𝑎𝑎𝑖𝑖𝑗𝑗 is 1 4. No carry over (since the base 𝑐𝑐 = 𝑚𝑚 + 𝑘𝑘𝑛𝑛 + 1 is large enough) 5. By (2),(3),(4): the left most digit of 𝛴𝛴𝑗𝑗=1 𝑝𝑝 𝑎𝑎𝑖𝑖𝑗𝑗+ 𝑟𝑟1⋅𝑏𝑏1+ ⋯+ 𝑟𝑟𝑛𝑛⋅𝑏𝑏𝑛𝑛is 𝑝𝑝 6. By (1),(5): 𝑝𝑝= 𝑘𝑘 Claim: If ∑p j=1 aij + r1 · b1 + · · · rnbn = s, then p = k Proof ▶ The leftmost digit of ∑p j=1 aij + r1 · b1 + · · · rnbn = s is k (base c) ▶ The leftmost digit of bi is 0 ▶ The leftmost digit of aij is 1 ▶ No carry over (since the base c = m + kn + 1 is large enough) ▶ Hence, it must be that p = k Lecture 10 The Complete Reduction Given: 𝑈𝑈 = 1, … , 𝑛𝑛, ℱ= {𝑈𝑈1, … , 𝑈𝑈𝑚𝑚}, 𝑘𝑘 Define: 𝑋𝑋= 𝑎𝑎1, … , 𝑎𝑎𝑚𝑚, 𝑏𝑏1, … , 𝑏𝑏1, … , 𝑏𝑏𝑛𝑛, … , 𝑏𝑏𝑛𝑛 , where: 𝑘𝑘−1 times 𝑘𝑘−1 times The Complete Reduction 0 1 … 1𝑈𝑈1 𝑈𝑈2 𝑈𝑈𝑚𝑚 1 1 … 0 0 1 … 1 ⋮ ⋮ ⋮ 1 0 1 … 1𝑎𝑎1≔ 𝑎𝑎2≔ 𝑎𝑎𝑚𝑚 ≔ 1 1 1 … 0 1 0 1 … 1 ⋮ 𝑐𝑐 𝑐𝑐 𝑐𝑐 𝑠𝑠: = 𝑘𝑘 𝑘𝑘 𝑘𝑘 … 𝑘𝑘 𝑐𝑐 Length 𝑛𝑛+ 1 Length 𝑛𝑛+ 1 0 0 … 1 … 0𝑏𝑏𝑖𝑖≔ (𝑖𝑖+ 1)-st position 𝑐𝑐 Proof: Efficiency of reduction: • the numbers in 𝑋𝑋we construct have length ≤ 𝒏𝒏+ 𝟏𝟏 ⋅𝐥𝐥𝐥𝐥𝐥𝐥𝒄𝒄in binary • We can compute them in polynomial time Theorem: 𝑆𝑆𝑈𝑈𝑈𝑈𝑆𝑆𝑆𝑆𝑉𝑉𝑈𝑈𝑆𝑆 ≤𝑃𝑃𝑆𝑆𝑈𝑈𝑈𝑈𝑆𝑆𝑈𝑈𝑈𝑈−𝑆𝑆𝑈𝑈𝑆𝑆 Theorem: SET COVER ≤p SUBSET-SUM Proof: Eﬃciency of reduction: ▶ the numbers in X we construct have length ≤ (n + 1) log c in binary ▶ We can compute them in polynomial time Lecture 10 Correctness (⇒) Suppose: ⟨U, F , k⟩⟩ ∈ SET COVER ▶ Therefore, ∃Ti1 , . . . , Tik s.t. ∪k j=1Tij = U ▶ First coordinate of ∑k j=1 aij is k ▶ Let th be the (h + 1)st coordinate of ∑k j=1 aij ▶ Since each element is covered we have 1 ≤ th ≤ k ▶ By adding (k − th) copies of bh we can make the (h + 1)st digit equal to k without aﬀecting other digits ▶ Thus, ∑k j=1 aij + (k − t1)b1 + · · · + (k − tn) · bn = s ▶ Hence, ⟨X , s⟩ ∈ SUBSET-SUM Lecture 10 Correctness (⇐) Suppose: ⟨X , s⟩ ∈ SUBSET-SUM Thus ∃ai1 , . . . , aip , b1, . . . , b1︸ ︷︷ ︸ r1 times , . . . , bn . . . , bn︸ ︷︷ ︸ rn times ∈ X s.t. p∑ j=1 aij + r1 · b1 + · · · rn · bn = s = k . . . k c Let Ti1 , . . . , Tik ∈ F be the sets corresponding to ai1 , . . . , aik Step 1: p = k ▶ There is no carry over when computing the sum ▶ The ﬁrst digit in the sum = number of aij ’s = p ▶ The ﬁrst digit in s = k and so p = k Step 2: for every h ∈ {1, 2, . . . , n} some set Tiq contains h ▶ The (h + 1)st digit of ∑k j=1 aij + r1 · b1 + · · · rnbn is k ▶ The (h + 1)st digit of bi is 1 f i = h and 0 otherwise ▶ Since rh ≤ k = 1 the (h + 1)st digit of ∑k j=1 aij is at least 1 ▶ Therefore the (h + 1)st digit of at least one of ai1 , . . . , aik is 1 ▶ So some set Tiq contains h Conclusion: ⋃k j=1 Tij = U and so ⟨U, F , k⟩ ∈ SET COVER Lecture 10 NP-complete problems you can use: CLIQUE, SAT, 3SAT, INDSET VERTEXCOVER, SETCOVER, SUBSET-SUM, PERFECT-3-MATCHING Lecture 10","libVersion":"0.5.0","langs":""}