{"path":"Lectures/Lecture9.pdf","text":"Lecture 9: NP-completeness, Reductions Mika Göös School of Computer and Communication Sciences Lecture 9 Recap: NP Lecture 9 The class NP Deﬁnition: A veriﬁer for a language A is a TM V , where A = {w | ∃C s.t. V accepts ⟨w , C ⟩} . A polynomial time veriﬁer runs in polynomial time in |w|. Deﬁnition: NP is the class of languages with polynomial time veriﬁers Lecture 9 Non-deterministic Turing Machines Recall: In a Turing machine, δ : (Q × Γ) −→ Q × Γ × {L, R}. In a Nondeterministic Turing Machine (NTM), δ : (Q × Γ) −→ P(Q × Γ × {L, R}) (several possible transitions for a given state and tape symbol) Deﬁnition: A nondeterministic decider for language L is an NTM N such that for each x ∈ Σ∗, every computation of N on x halts, and moreover, ▶ If x ∈ L, then some computation of N on x accepts. ▶ If x < L, then every computation of N on x rejects. An NTM is a polynomial time NTM if the running time its longest computation on x is polynomial in |x|. Lecture 9 Nondeterministic deciders ⇐⇒ Veriﬁers Theorem: For any language L ⊆ Σ∗, L has a nondeterministic poly-time decider ⇐⇒ L has a poly-time veriﬁer. Proof Sketch (⇐=): Let V be the veriﬁer. NTM N on input x does the following: 1 Write a certiﬁcate C nondeterministically. 2 Run V on ⟨x , C ⟩. Proof Sketch (=⇒): Let N be the nondeterministic decider. Veriﬁer V on ⟨x , C ⟩ computes: ▶ Simulate N on x , choosing transitions given by C . V accepts ⟨x , C ⟩ iﬀ C is the accepting path of N on x . Lecture 9 Non-deterministic Polynomial-time Theorem: For any language L ⊆ Σ∗, L has a nondeterministic poly-time decider ⇐⇒ L has a poly-time veriﬁer. Deﬁnition: NP is the class of languages which have poly-time nonde- terministic deciders, or equivalently, have poly-time veriﬁers. Deﬁnition: NTIME(t(n)) = {L : L has a nondeterministic O(t(n)) time decider} Then NP = ∞⋃ k=1 NTIME(nk ) . ∴ SAT, GI, INDSET are all in NP. Lecture 9 NP-completeness Lecture 9 Poly-time Reductions (1): Poly-time Computability Reductions Part 1: Computability 0 0 1 0 1 1 0 1 ⊔ 1 1 1 0 ⊔ ⊔ ⊔ ⊔ ⊔ 𝑤 𝑇𝑀𝑓 𝑓(𝑤) 𝑓 Σ ⋆ Σ ⋆ 𝑤1 𝑤2 𝑤3 𝑣1 𝑣2 𝑣3𝑤4 𝑣3𝑤4 Definition: A function 𝑓:Σ ⋆→ Σ ⋆is a computable function if some TM 𝑀, on every input 𝑤 halts with just 𝑓(𝑤)on its tape Deﬁnition: A function f : Σ ∗ → Σ∗ is a polynomial time computable function if some poly-time TM M, on every input w halts with just f (w ) on its tape. Lecture 9 Poly-time Reductions (2): Correctness Reductions Part 2: Correctness Definition: Language 𝐴 is mapping reducible to language 𝐵,written 𝑨 ≤𝒎 𝑩,if there is a computable function 𝑓:Σ ⋆→ Σ ⋆,such that for every 𝑤 ∈Σ ⋆: 𝒘∈𝑨 ⟺ 𝒇𝒘 ∈𝑩 Σ ⋆ Σ ⋆ 𝑓 𝑤1 𝑤2 𝑤3 𝑣1 𝑣2 𝑣3 𝐴 𝑤4ഥ𝐴 𝐵 ത𝐵𝑣4𝑤4 Reduction Mapping may not be Surjective 𝑣3 𝑣5 Deﬁnition: Language A is poly-time mapping reducible to language B, written A ≤P B, if there is a poly-time computable function f : Σ ∗ → Σ∗, such that for every w ∈ Σ∗: w ∈ A ⇔ f (w ) ∈ B Lecture 9 NP-completeness Deﬁnition: A language L is said to be NP-complete if ▶ L is in NP. ▶ For every language L′ in NP, L ′ ≤P L. Observe: If one NP-complete language has a polynomial time decider, then every language in NP has a polynomial time decider, i.e. P = NP. The Cook–Levin Theorem: SAT is NP-complete. To show L is NP-complete: ▶ [NP membership] Give a poly-time veriﬁer for L. ▶ [NP hardness] Show C ≤P L for some NP-complete language C (not the other way around) Lecture 9 Big picture Lecture 9 Takehome message Lecture 9 3SAT is NP-complete kSAT = {⟨ϕ⟩ : ϕ is satisﬁable and each clause of ϕ contains ≤ k literals} Veriﬁer for 3SAT: Just use the veriﬁer for SAT. Claim: SAT ≤P 3SAT Reduction: Given ϕ, ▶ While ϕ contains a clause K = (ℓ1 ∨ ℓ2 ∨ ℓ3 ∨ · · · ∨ ℓm) with > 3 literals Replace K with the following two clauses K1 = (ℓ1 ∨ ℓ2 ∨ z) K2 = (z ∨ ℓ3 ∨ · · · ∨ ℓm)    Preserves satisﬁability (check!) What is the runtime? Does SAT ≤P 2SAT analogously? Lecture 9 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM and many more . . . Lecture 9 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM Lecture 9 INDSET is NP-complete We have already seen that INDSET = {⟨G, k⟩ : G has an independet set of size k} is in NP and so it remains to give a poly-time reduction from an NP-complete language Lecture 9 INDSET is NP-complete Claim: SAT ≤P INDSET ϕ = x1︸︷︷︸ K1 ∧ (x1 ∨ x2) ︸ ︷︷ ︸ K2 ∧ (x1 ∨ x2 ∨ x3) ︸ ︷︷ ︸ K3 ∧ (x1 ∨ x2 ∨ x3 ∨ x4) ︸ ︷︷ ︸ K4 x1 x1 x2 x1 x2 x3 x1 x2 x3 x4 K1 K2 K3 K4 Lecture 9 INDSET is NP-complete Claim: SAT ≤P INDSET Reduction f : On input ϕ, 1 Let G be the graph generated as follows. 1 Take a vertex for each literal of each clause. 2 Add edges for pairs of conﬂicting literals. 3 Add edges for pairs of literals from the same clause. 2 Let m be the number of clauses in ϕ. 3 Output (G, m). Claim: ϕ ∈ SAT =⇒ f (ϕ) ∈ INDSET Proof: C : satisfying assignment of ϕ. Pick one true literal from each clause. The corresponding vertices form a independent set. Claim: f (ϕ) ∈ INDSET =⇒ ϕ ∈ SAT Proof: C : independent set in G, |C | = m. C contains one vertex from each group. Set the corresponding literals to true to get a satisfying assignment. Lecture 9 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM Lecture 9 CLIQUE CLIQUE Defn: A 𝑘-clique is a subset of 𝑘pairwise connected vertices 𝐷 𝐴 𝐵 𝐶 𝐹 𝐺,3 ∈𝐶𝐿𝐼𝑄𝑈𝐸? 𝐺,4 ∈𝐶𝐿𝐼𝑄𝑈𝐸? No 4-clique 𝐴,𝐵,𝐹 is a 3-clique 𝐶𝐿𝐼𝑄𝑈𝐸= 𝐺,𝑘 𝐺 hasacliqueofsize𝑘} 𝐸 A,B,F is a 3-clique Deﬁnition: A k-clique is a subset of k pairwise connected vertices CLIQUE = {⟨G, k⟩ | G has a clique of size k} ⟨G, 3⟩ ∈ CLIQUE ? Yes ⟨G, 4⟩ ∈ CLIQUE ? No Lecture 9 CLIQUE is NP-Complete Theorem: INDSET ≤p CLIQUE Corollary: CLIQUE is NP-complete Goal ﬁnd a poly-time reduction from INDSET to CLIQUE Lecture 9 INDSET vs CLIQUE For a graph G: Independent set: A subset of pairwise non-adjacent vertices Clique: A subset of pairwise adjacent vertices INDSET vs CLIQUE For a graph 𝐺: Independent set: A subset of pairwise non-adjacent vertices Clique: A subset of pairwise adjacent vertices Observation: If 𝐺is a graph and ҧ𝐺is its complement, then a subset 𝑆 of the vertices of 𝐺is an independent set iff 𝑆 is a clique of ҧ𝐺 Definition (Complement): The complement of a graph 𝐺=(𝑉,𝐸)is a graph ҧ𝐺=(𝑉,ഥ𝑬)with the same vertex set and the edge set ത𝐸 s.t. 𝑢𝑣 ∈ ത𝐸 iff 𝑢𝑣 ∉ 𝐸 T𝐡𝐞𝐨𝐫𝐞𝐦:𝐶𝐿𝐼𝑄𝑈𝐸≤𝑃𝐼𝑁𝐷𝑆𝐸𝑇and 𝐼𝑁𝐷𝑆𝐸𝑇≤𝑃𝐶𝐿𝐼𝑄𝑈𝐸 Def (Complement): The complement of a graph G = (V , E ) is a graph ¯G = (V , ¯E ) with same vertex set and edge set ¯E s.t. uv ∈ ¯E iﬀ uv < E Observation: If G is a graph and ¯G its complement, then a subset S of the vertices of G is an independent set iﬀ S is a clique of ¯G Lecture 9 INDSET ≤p CLIQUE Reduction: f (⟨G = (V , E ), k⟩) := ⟨ ¯G = (V , ¯E ), k⟩ Eﬃciency: The reduction is polynomial time Correctness: ⟨G, k⟩ ∈ INDSET ⇔ ⟨ ¯G, k⟩ ∈ CLIQUE Proof of correctness: INDSET vs CLIQUE 𝐼𝑁𝐷𝑆𝐸𝑇≤𝑃𝐶𝐿𝐼𝑄𝑈𝐸 1. Reduction: 𝑓 𝐺= 𝑉,𝐸 ,𝑘 ≔ ҧ𝐺=(𝑉,ത𝐸),𝑘 2. Efficiency: The reduction is polynomial time 3. Correctness: 𝐺,𝑘 ∈𝐼𝑁𝐷𝑆𝐸𝑇⇔ ഥ𝐺,𝑘 ∈𝐶𝐿𝐼𝑄𝑈𝐸 ⇒⇔ Similarly: 𝐶𝐿𝐼𝑄𝑈𝐸≤𝑃INDSET Proof of correctness: 𝑎 𝑏 𝑐 𝑑 𝑒 𝑔 𝑎 𝑏 𝑐 𝑑 𝑒 𝑔 𝐺,𝑘 ∈𝐼𝑁𝐷𝑆𝐸𝑇,𝑆 =𝑘 𝑆 ҧ𝐺,𝑘 ∈𝐶𝐿𝐼𝑄𝑈𝐸 𝑆 Lecture 9 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM Lecture 9 Vertex Cover Deﬁnition: For a graph G = (V , E ), a vertex cover is a subset S of V such that every edge of G is incident to at least one vertex in S Example Vertex Cover Definition: For a graph 𝐺(𝑉,𝐸),a vertex cover is a subset 𝑆 of 𝑉such that every edge of 𝐺is incident with at least one vertex in 𝑆 Example: Definition: 𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅={ 𝐺,𝑘:𝐺is a graph that has a vertex cover of size 𝑘} 𝐺 𝐺,4 ∈𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅? 𝐺,3 ∈𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅? Deﬁnition: VERTEX COVER = {⟨G, k⟩ : G is a graph that has a vertex cover of size k} ▶ ⟨G, 4⟩ ∈ VERTEX COVER? Yes ▶ ⟨G, 3⟩ ∈ VERTEX COVER? No Lecture 9 VERTEX COVER is NP-Complete STEP 1: VERTEX COVER ∈ NP TM V : “On input ⟨G, k, C ⟩ 1 IF |C | , k, THEN REJECT 2 FOR every pair u , v of vertices DO ▶ IF uv is an edge AND u < C AND v < C THEN REJECT 3 ACCEPT” STEP 2: INDSET ≤p VERTEX COVER How to reduce INDSET to VERTEX COVER? Lecture 9 INDSET vs VERTEX COVER Lemma: For every graph G, a subset S of the vertices is a vertex cover if and only if ¯S is an independent set where ¯S = V \\ S Vertex Covers vs Independent Sets 𝐺 𝑆 Vertex cover Since 𝑆is a vertex cover, such an edge cannot exist. Theorem: For every graph 𝐺,a subset 𝑆of the vertices is a vertex cover if and only if ҧ𝑆is an independent set where ҧ𝑆=𝑉\\𝑆 Independent set Corollary: For every graph 𝐺and a positive integer 𝑘,𝐺has an independent set of size 𝑘iff 𝐺has a vertex cover of size 𝑛−𝑘 Corollary: For every graph G and a positive integer k, G has an independent set of size k iﬀ G has a vertex cover of size n − k Lecture 9 INDSET ≤p VERTEX COVER Reduction: f (⟨G, k⟩) := ⟨G, n − k⟩, where n is the number of vertices of G Eﬃciency: The reduction f is polynomial time Correctness: Lemma/Corollary on previous slide! VERTEX COVER is NP-Complete STEP 1: VERTEX COVER ∈ NP TM V: “On input 𝐺,𝑘,𝐶 1. IF 𝐶 ≠𝑘,THEN, REJECT 2. FOR every pair 𝑢 ≠𝑣 of vertices DO 1. IF 𝑢𝑣 is an edge AND 𝑢 ∉ 𝐶 AND 𝑣 ∉ 𝐶, THEN REJECT 3. ACCEPT” STEP 2: 𝐼𝑁𝐷𝑆𝐸𝑇≤𝑃𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅. Reduction: 𝑓 𝐺,𝑘 ≔ 〈𝐺,𝑛−𝑘〉where 𝑛is the number of vertices of 𝐺. 𝐺,𝑘 ∈ 𝐼𝑁𝐷𝑆𝐸𝑇⟺ ⟺ 𝐺,𝑛−𝑘 ∈ 𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅 𝐺 Efficiency: 𝑓is (obviously) polynomial time computable Correctness: Theorem on previous slide! Lecture 9 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM Lecture 9 Set Cover Deﬁnition: Let U = {1, . . . , n} and F = {T1, . . . , Tm} be a family of subsets ∀i, Ti ⊆ U A subset {Ti1, . . . , Tik } ⊆ F is called a set cover of size k if ⋃k j=1 Tij = U 𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅 3 1 2 4 7 5 6 9 8 Definition: Let 𝑈 ={1,…,𝑛}and ℱ= 𝑇1,…,𝑇𝑚 be a family of its subsets ∀𝑖,𝑇𝑖 ⊆𝑈 A subset 𝑇𝑖1,…,𝑇𝑖𝑘 ⊆ℱis called a set cover of size 𝑘if ∪𝑗=1 𝑘 𝑇𝑖𝑗 =𝑈 𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅≔ {𝑈,ℱ,𝑘 ∶ℱcontains a set cover of size 𝑘} Example: 𝑈,ℱ,3 ∈𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅? 𝑈,ℱ,2 ∈𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅? {1,2,4,3,6,5,{4,7,8,9}} 𝑈 SET COVER = {⟨U, F, k⟩ | F contains a set cover of size k} Example: ▶ ⟨U, F, 3⟩ ∈ SET COVER? Yes {{1, 2, 4}, {3, 6, 5}, {4, 7, 8, 9}} ▶ ⟨U, F, 2⟩ ∈ SET COVER? No Lecture 9 SET COVER is NP-Complete Theorem: VERTEX COVER ≤p SET COVER Corollary: SET COVER is NP-complete Lecture 9 VERTEX COVER ≤p SET COVER Key idea: VERTEX COVER is a special case of SET COVER Example: V𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅≤𝑃𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅 Reduction: •Let 𝐺=(𝑉,𝐸),𝑘 be an instance of 𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅 •Set 𝑈 ≔ 𝐸 •For every vertex 𝑣∈𝑉 create a set 𝑆𝑣 𝑆𝑣≔ 𝑒∈𝐸:𝑒isincidentto 𝑣 •Let ℱ≔ 𝑆𝑣∶𝑣∈𝑉 and set 𝑘′=𝑘 𝑒1 𝑒2 𝑒3 𝑒4 𝑒5 𝑈 = 𝑒1,𝑒2,𝑒3,𝑒4,𝑒5 ℱ={ 𝑒1,𝑒4 ,𝑒1,𝑒2,𝑒5 , 𝑒2,𝑒3 ,𝑒3,𝑒4,𝑒5 } 𝑘′=𝑘=2𝑘=2 Example: Key Idea: 𝑉𝐸𝑅𝑇𝐸𝑋𝐶𝑂𝑉𝐸𝑅is a special case of 𝑆𝐸𝑇𝐶𝑂𝑉𝐸𝑅 Efficiency: Obvious from the construction Reduction: ▶ Let ⟨G = (V , E ), k⟩ be an instance of VERTEX COVER ▶ Set U := E ▶ For every vertex v ∈ V create a set Sv Sv := {e ∈ E | e is incident to v } ▶ Let F := {Sv | v ∈ V } and set k ′ = k Eﬃciency: Obvious from construction Lecture 9 Correctness (⇒): If G has a vertex cover of cardinality k, then U can be covered by k sets Proof: ▶ Suppose C ⊆ V is a vertex cover of G and |C | = k ▶ Every edge ei is adjacent to at least one vertex in C ⋃ v ∈C Sv = E ▶ Hence U can be covered by k sets Correctness (⇐): If U can be covered by k sets, then G has a vertex cover of cardinality k Proof: ▶ Let Sv1 , Sv2 , . . . , Svk be a collection of sets which cover U = E ▶ We claim that C = {v1, v2, . . . , vk } is a vertex cover of G ▶ Indeed, every edge e in G belongs to Svi for some i ∈ {1, 2, . . . , k} ▶ Hence, every edge e in G is incident to some vertex vi ∈ C Lecture 9 SAT 3SATINDSET CLIQUEVERTEX COVER SET COVER SUBSET SUM Lecture 9 SUBSET-SUM Let X denote a (multi) set of positive integers Deﬁnition: SUBSET-SUM = {⟨X , s⟩ : X contains a subset whose elements sum to s} Example: X = {1, 3, 4, 6, 13, 13} ▶ ⟨X , 8⟩ ∈ SUBSET-SUM? Yes T = {1, 3, 4} ▶ ⟨X , 12⟩ ∈ SUBSET-SUM? No Question: SUBSET-SUM ∈ P? It depends on the input length Lecture 9 SUBSET-SUM •Let 𝑋be a (multi) set of positive integers •Definition: 𝑆𝑈𝐵𝑆𝐸𝑇−𝑆𝑈𝑀 ≔ { 𝑋,𝑠:𝑋contains a subset whose elements sum to 𝑠} •Example: 𝑋= 1,3,4,6,13,13 • 𝑋,8 ∈𝑆𝑈𝐵𝑆𝐸𝑇−𝑆𝑈𝑀? • 𝑋,12∈𝑆𝑈𝐵𝑆𝐸𝑇−𝑆𝑈𝑀? •Question: Does 𝑆𝑈𝐵𝑆𝐸𝑇−𝑆𝑈𝑀 ∈𝑃? •Input length 1 * 1 1 1 * 1 1 1 1 1 * 1 1 1 1 ⊔ 𝑇 ≔ {1,3,4} Unary vs Binary 1 * 1 1 * 1 0 1 * 1 0 0 ⊔ Input length: 𝑥1+𝑥2+⋯+𝑥𝑚 +𝑠 ≫ Input length: ⌈log(𝑥1)⌉+⋯+⌈log(𝑥𝑚)⌉+⌈log(𝑠)⌉ 〈1,3,5,4〉 〈1,3,5,4〉 1 3 5 4 1 3 5 4 In 𝑆𝑈𝐵𝑆𝐸𝑇-𝑆𝑈𝑀 we use binary encoding Lecture 9 SUBSET-SUM: An Algorithm 𝑆𝑈𝐵𝑆𝐸𝑇-𝑆𝑈𝑀: An Algorithm Running time: For the input {𝑥1,… ,𝑥𝑚},𝑠 ,the above algorithm takes 𝑂 𝑚 ⋅σ𝑖=1 𝑚 𝑥𝑖 steps to output whether or not 𝑋,𝑠 ∈𝑆𝑈𝐵𝑆𝐸𝑇-𝑆𝑈𝑀 • Let 𝑋= 𝑥1,𝑥2,… ,𝑥𝑚 , 𝑠𝑢𝑚≔ σ𝑗=1 𝑚 𝑥𝑗 • FOR 𝑖 =1. . 𝑚 DO • FOR 𝑗 =0. . 𝑠𝑢𝑚DO • 𝐴 𝑖,𝑗 : =𝐹𝑎𝑙𝑠𝑒 • FOR 𝑖 =0to 𝑚 DO • 𝐴 𝑖,0 ≔ 𝑇𝑟𝑢𝑒 • FOR 𝑖 =1. . 𝑚 DO • FOR 𝑗 =1. . 𝑠𝑢𝑚DO • IF 𝐴 𝑖 −1,𝑗 −𝑥𝑖 =𝑇𝑟𝑢𝑒OR 𝐴 𝑖 −1,𝑗 =𝑇𝑟𝑢𝑒THEN 𝐴 𝑖,𝑗 : =𝑇𝑟𝑢𝑒 • IF 𝑨𝒎,𝒔 =𝑻𝒓𝒖𝒆,ACCEPT; ELSE, REJECT Unary representation: The length of the input 𝑥1+𝑥2+⋯+𝑥𝑚 +𝑠. In this case the running time is polynomial in the input length Binary representation: The length of the input ⌈log(𝑥1)⌉+⋯+⌈log(𝑥𝑚)⌉+⌈log(𝑠)⌉. In this case, the running time is exponential in the input length Lecture 9 SUBSET-SUM is NP-Complete Theorem: SET COVER ≤p SUBSET-SUM Proof: Next lecture Corollary: SUBSET-SUM is NP-Complete Lecture 9","libVersion":"0.5.0","langs":""}