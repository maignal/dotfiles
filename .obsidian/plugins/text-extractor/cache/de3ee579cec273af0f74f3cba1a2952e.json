{"path":"Homeworks/Submitted Answers/HW3.pdf","text":"Homework III, Theory of Computation 2025 Submission: The deadline for Homework 3 is 23:59 on 22 May. Please submit your solutions on Moodle. Typing your solutions using a typesetting system such as LATEX is strongly encouraged! If you must handwrite your solutions, write cleanly and with a pen. Messy and unreadable homeworks will not be graded. No late homeworks will be accepted. Writing: Please be precise, concise and (reasonably) formal. Keep in mind that many of the problems ask you to provide a proof of a statement (as opposed to, say, just to provide an example). Therefore, make sure that your reasoning is correct and there are no holes in it. A solution that is hard/impossible to decipher/follow might not get full credit (even if it is in principle correct). You do not need to reprove anything that was shown in the class—just state clearly what was proved and where. Collaboration: These problem sets are meant to be worked on in groups of 2–4 students. Please submit only one writeup per team—it should contain the names of all the students. You are strongly encouraged to solve these problems by yourself. If you must, you may use books or online resources to help solve homework problems, but you must credit all such sources in your writeup and you must never copy material verbatim. Even though only one writeup is submitted, it is expected that each one of the team members is able to fully explain the solutions if requested to do so. Grading: Each of the two problems will be graded on a scale from 0 to 5. Warning: Your attention is drawn to the EPFL policy on academic dishonesty. In particular, you should be aware that copying solutions, in whole or in part, from other students in the class or any other source (e.g., ChatGPT) without acknowledgement constitutes cheating. Any student found to be cheating risks automatically failing the class and being referred to the appropriate office. Page 1 (of 2) CS-251 Theory of Computation • Spring 2025 Homework 3 In the following problems, you may assume the NP-completeness of any of the problems discussed in the lectures: SAT, Independent-Set, Clique, Vertex-Cover, Set-Cover, Subset-Sum, etc. Make sure to prove that your reductions are correct! 1 Let G = (V, E, w) be an undirected graph with edge-weights w : E → Z. A subset M ⊆ E of the edges is a perfect matching if every vertex is incident to exactly one edge in M . In other words, the edges in M pair up all the vertices. The weight of a matching M is the total weight of its edges, that is, ∑e∈M w(e). An example is depicted below. The graph consists of 4 vertices, 5 edges with integer weights, and the thick edges indicate a perfect matching of weight 2 + 3 = 5. 2 4 3 5 1 Show that the following problem is NP-complete: ExactMatch = {⟨G = (V, E, w), k⟩ : G has a perfect matching of weight exactly k} . 2 Let G = (V, E) be an undirected graph. We say that S ⊆ V is a blocking set if it contains at least one node from each cycle in G. In other words, if we remove the nodes S (and all edges adjacent to S) from G, then we are left with a forest (graph with no cycles). For example, the highlighted nodes below form a blocking set of size 2. Show that the following problem is NP-complete: Block = {⟨G, k⟩ : G is a graph that contains a blocking set of of size k}. Page 2 (of 2) CS-251 Theory of Computation • Spring 2025","libVersion":"0.5.0","langs":""}