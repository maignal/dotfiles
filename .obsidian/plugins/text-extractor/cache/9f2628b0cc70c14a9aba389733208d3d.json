{"path":"Exercises/Solutions/ToC ex 9 sol.pdf","text":"Exercise IX, Theory of Computation 2025 These exercises are for your own benefit. Feel free to collaborate and share your answers with other students. Solve as many problems as you can and ask for help if you get stuck for too long. Problems marked * are more difficult but also more fun :). These problems are taken from various sources at EPFL and on the Internet, too numer- ous to cite individually. 1 A k-CNF formula is a CNF formula where each clause has at most k literals. The language kSAT consists of all k-CNF formulas which are satisfiable. What is wrong with the following proof of NP-completeness of 2SAT? Since 3SAT is in NP, so is 2SAT. For any 2-CNF φ = (a1 ∨ b1) ∧ · · · ∧ (an ∨ bn), define the 3-CNF f (φ) = (a1 ∨ b1 ∨ b1) ∧ · · · ∧ (an ∨ bn ∨ bn), where the ai and bi are literals. Note that φ is satisfiable ⇐⇒ f (φ) is satisfiable. Hence 3SAT ≤P 2SAT, and it follows that 2SAT is NP-complete. Solution: The problem with the proof is that the function φ goes from 2SAT to 3SAT. This only proves 2SAT ≤p 3SAT, which while true, is not the desired direction. To prove that 2SAT is NP complete, we would need a function that maps any given 3SAT instance to a 2SAT instance. 2 Prove that the following problem is NP-complete: Given a set S, a collection C of subsets of S and an integer k, is there a subset T ⊆ S of size at most k such that T ∩ C ̸= ∅ for all C ∈ C? Solution: This problem is called HittingSet. To prove it is NP-complete, we will first show that it is in NP. After that, we will show HittingSetis NP-hard by reducing the vertex cover problem VC to it. An instance of HittingSetis a triple (S, C, k), and as a witness we can take the set T . The verifier V can be constructed as follows. On input ((S, C, k), T ), do: 1. If |T | > k, reject. 2. If T ̸⊆ S, reject. 3. For every C ∈ C, do: (a) If T ∩ C = ∅, reject. 4. Accept. We observe that V runs in polynomial time, and V ((S, C, k), T ) accepts if and only if (S, C, k) is a yes instance of our problem. It remains to show that HittingSetis NP-hard by reducing from the vertex cover problem VC. First, we recall that an instance (G = (V, E), k) is in VC if and only if there is a subset S of V with at most k vertices, such that every edge in E has at least one vertex in S. We define the reduction function f as follows. Page 1 (of 3) CS-251 Theory of Computation • Spring 2025 On input ((V, E), k), do: 1. Define C = {{e} : e ∈ E}. 2. Output (V, C, k). Note that f is polynomial-time computable. We now show that ((V, E), k) ∈ VC if and only if f ((V, E), k) = (V, C, k) ∈ HittingSet. • Assume that (G, k) ∈ VC: Then G has a vertex cover T of size at most k. By definition, T is also a hitting set for (V, C, k) since for each set C ∈ C, C ∩ T ̸= ∅. • Assume that (V, C, k) has a hitting set T : Then by definition, T is a vertex cover for (G, k). 3 Using the NP-completeness SubsetSum, prove that the following problem is NP-complete: Given integers V, v1, . . . , vn and W, w1, . . . , wn, is there a subset S of {1, 2, . . . , n} such that ∑ i∈S wi ≤ W and ∑ i∈S vi ≥ V ? Solution: Let’s denote this problem as KnapSack. We first recall that an instance to the SubsetSum problem consists of a set of integers S and an integers M . (S, M ) ∈ SubsetSum if and only if there is some subset T of S such that the sum of elements of T is M . We now show that KnapSack ∈ NP. An instance of KnapSackis ((V, v1, . . . , vn), (W, w1, . . . , wn)) and as a witness we can take the set S. Define the verifier as follows. On input (((V, v1, . . . , vn), (W, w1, . . . , wn)), S), do: 1. If S ̸⊆ [n], reject. 2. Compute s1 = ∑ i∈S wi. 3. Compute s2 = ∑ i∈S vi. 4. Accept if s1 ≤ W and s2 ≥ V . Otherwise, reject. Observe that this algorithm runs in polynomial time. Moreover, it accepts if and only if the instance is a yes-instance. It remains to show that KnapSackis NP-hard. We do so by reducing from SubsetSum using f defined as follows. On input (S, M ), do: 1. Let S = {s1, . . . , sn}. 2. Output ((M, s1, . . . , sn), (M, s1, . . . , sn)). It is clear that f runs in polynomial time. We now show that (S, M ) ∈ SubsetSum if and only if f (S, M ) ∈ KnapSack. • Assume that (S, M ) ∈ SubsetSum: Then there exists some T ⊆ {1, 2, . . . , n} such that∑ i∈T si = M . Therefore, using the same set T as a witness, f (S, M ) ∈ KnapSack. • Assume that f (S, M ) ∈ KnapSack: Then there exists some T ⊆ {1, 2, . . . , n} such that∑ i∈T si ≥ M and ∑i∈T si ≤ M , which implies that ∑ i∈T si = M . Thus, (S, M ) ∈ SubsetSum, as desired. Page 2 (of 3) CS-251 Theory of Computation • Spring 2025 4* Prove that the following problem is NP-hard: Given vectors v1, . . . , vm, V ∈ Zn and K ∈ Z, do there exist a1, . . . , am ∈ Z such that ∥ ∥ ∥ ∥ ∥ m∑ i=1 aivi − V ∥ ∥ ∥ ∥ ∥ 2 ≤ K? Note that for a vector v ∈ Rn, we have ∥v∥2 = ∑n i=1 v2 i . Hint: Firstconsiderthevariantoftheproblemwherea1,a2,...,am∈{0,1}. Solution: Let us denote this problem by ClosestVector. We show that ClosestVectoris NP-hard by reducing from SubsetSum. We first explain the intuition behind the reduction. Note that the problem SubsetSum can be reformulated as finding a1, . . . , an ∈ {0, 1} such that ∑n i=1 aisi = M , where the integers si and M are given. Now a natural idea would be to take vi = siv, V = M v and K = 0 for some fixed vector v. Then if (S, M ) ∈ SubsetSum, there are a1, . . . , an ∈ {0, 1} such that ∥ ∥ ∥ ∥ ∥ n∑ i=1 aivi − V ∥ ∥ ∥ ∥ ∥ 2 = ∣ ∣ ∣ ∣ ∣ n∑ i=1 aisi − M ∣ ∣ ∣ ∣ ∣ 2 ∥v∥2 = 0 ≤ K. However, it is also possible that (S, M ) ̸∈ SubsetSum but still ∥ ∑n i=1 aixi − M ∥2 = 0 for some other values of the ai, which need not be in {0, 1}. Consider S = {1}, M = 2, with (S, M ) ̸∈ SubsetSum, but if a1 = 2 we still get |1 · a1 − 2| = 0. Thus, we need to modify the reduction to make sure ai ∈ {0, 1} for all i. Consider the function f defined as follows. On input (S, M ), do: 1. For i ∈ {1, 2, . . . , n}, do: (a) Initialise vi = 0 ∈ Zn+1. (b) Set (vi)1 = si. (c) Set (vi)i+1 = 2. 2. Set V = (M, 1, . . . , 1) ∈ Zn+1 and K = n. 3. Output ((v1, . . . , vn), V, K). Clearly f runs in polynomial time. We show that (S, M ) ∈ SubsetSum if and only if f (S, M ) = ((v1, . . . , vn), V, K) ∈ ClosestVector. • Assume that (S, M ) ∈ SubsetSum: There exists T ⊆ S such that ∑ s∈T s = M . For all i, let ai = 1 if si ∈ T and ai = 0 otherwise. Let u = ∑n i=1 aivi. By construction, we know that u1 = M and ui = 0 or 2 for 2 ≤ i ≤ n + 1. Thus, V and u differ by 1 in exactly n coordinates. Thus, ∥ ∑n i=1 aivi − V ∥2 = ∑n i=1(±1)2 = n ≤ K as desired. • Assume that f (S, M ) ∈ ClosestVector: There exists a1, . . . , an ∈ Z which satisfy ∥ ∑n i=1 aivi − V ∥2 ≤ n. Again set u = ∑n i=1 aivi. Observe that for all 2 ≤ i ≤ n + 1, ui is even but Vi = 1. Thus, u and V differ by at least 1 in at least n coordinates, which implies ∥ ∑n i=1 aivi − V ∥2 ≥ n. Therefore, we must have ∥ ∑n i=1 aivi − V ∥2 = n. This implies that we must have equality in the last coordinate, u1 = V1 = M , and all the ai are either 0 or 1. Let T be the set of si where ai = 1. Since u1 = M , This set T now witnesses the fact that (S, M ) ∈ SubsetSum, as desired. Page 3 (of 3) CS-251 Theory of Computation • Spring 2025","libVersion":"0.5.0","langs":""}